"""
species_update.py — Species Assignment from SpeciesNet Predictions
-------------------------------------------------------------------

This module updates the wildlife image database with species predictions generated by the SpeciesNet model.

Features:
- Parses predictions from JSON output
- Matches common names to internal species database (`species_flattened`)
- Updates image records with:
    - species ID (linked to known species if matched)
    - raw SpeciesNet classification string
    - confidence score
    - detection method metadata

Fallbacks:
- If species cannot be confidently matched, species ID remains -1

Intended for:
- Batch updating the database after running SpeciesNet on new images

Dependencies:
- SQLAlchemy for database access
- smart_species_match for fuzzy species resolution
- JSON for handling SpeciesNet output


"""

import json
from tools.species_lookup import smart_species_match
from db.db import SessionLocal
from db.image_model import ImageHeader


def update_species_from_predictions(json_path):
    """
    Updates species information in the database using SpeciesNet prediction results.

    Args:
        json_path (str): Path to SpeciesNet results JSON file
    """
    # Load predictions from JSON
    with open(json_path, "r") as file:
        data = json.load(file)

    session = SessionLocal()

    for prediction in data.get("predictions", []):
        filepath = prediction.get("filepath")
        classifications = prediction.get("classifications", {})
        classes = classifications.get("classes", [])
        scores = classifications.get("scores", [])

        if not classes or not scores:
            print(f"No classifications found for {filepath}")
            continue

        # Select highest-confidence prediction
        best_index = scores.index(max(scores))
        best_class = classes[best_index]
        best_score = scores[best_index]

        # Expected format: class;order;family;genus;species;common_name
        parts = best_class.split(";")
        if len(parts) < 2:
            print(f"Too few parts in SpeciesNet classification: {best_class}")
            continue

        common_name = parts[-1].strip()
        speciesnet_raw = best_class

        try:
            record = session.query(ImageHeader).filter_by(stage_processed_path=filepath).first()
            if record:
                species_id = smart_species_match(common_name, session)
                print(f"→ Lookup result for '{common_name}': species_id = {species_id}")

                record.species_id = species_id
                record.speciesnet_raw = speciesnet_raw
                record.species_confidence = best_score
                record.species_detection_method = 'speciesnet'

                session.commit()
                print(f"✅ Successfully updated {filepath} — species_id: {species_id}")
            else:
                print(f"❌ No record found for {filepath} in database.")
        except Exception as e:
            session.rollback()
            print(f"❌ Failed to update {filepath}. Error: {e}")

    session.close()
    print("✅ Species information update complete.")
